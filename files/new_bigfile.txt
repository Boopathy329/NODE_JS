Node.js
About this documentation
Usage and example
Assertion testing
Asynchronous context tracking
Async hooks
Buffer
C++ addons
C/C++ addons with Node-API
C++ embedder API
Child processes
Cluster
Command-line options
Console
Corepack
Crypto
Debugger
Deprecated APIs
Diagnostics Channel
DNS
Domain
Errors
Events
File system
Globals
HTTP
HTTP/2
HTTPS
Inspector
Internationalization
Modules: CommonJS modules
Modules: ECMAScript modules
Modules: node:module API
Modules: Packages
Modules: TypeScript
Net
OS
Path
Performance hooks
Permissions
Process
Punycode
Query strings
Readline
REPL
Report
Single executable applications
SQLite
Stream
String decoder
Test runner
Timers
TLS/SSL
Trace events
TTY
UDP/datagram
URL
Utilities
V8
VM
WASI
Web Crypto API
Web Streams API
Worker threads
Zlib
Code repository and issue tracker
Node.js v23.5.0 documentation

 Table of contents  Index  Other versions  Options
Table of contents
About this documentation
Contributing
Stability index
Stability overview
JSON output
System calls and man pages
About this documentation#
Welcome to the official API reference documentation for Node.js!

Node.js is a JavaScript runtime built on the V8 JavaScript engine.

Contributing#
Report errors in this documentation in the issue tracker. See the contributing guide for directions on how to submit pull requests.

Stability index#
Throughout the documentation are indications of a section's stability. Some APIs are so proven and so relied upon that they are unlikely to ever change at all. Others are brand new and experimental, or known to be hazardous.

The stability indexes are as follows:

Stability: 0 - Deprecated. The feature may emit warnings. Backward compatibility is not guaranteed.
Stability: 1 - Experimental. The feature is not subject to semantic versioning rules. Non-backward compatible changes or removal may occur in any future release. Use of the feature is not recommended in production environments.
Experimental features are subdivided into stages:

1.0 - Early development. Experimental features at this stage are unfinished and subject to substantial change.
1.1 - Active development. Experimental features at this stage are nearing minimum viability.
1.2 - Release candidate. Experimental features at this stage are hopefully ready to become stable. No further breaking changes are anticipated but may still occur in response to user feedback. We encourage user testing and feedback so that we can know that this feature is ready to be marked as stable.
Experimental features leave the experimental status typically either by graduating to stable, or are removed without a deprecation cycle.

Stability: 2 - Stable. Compatibility with the npm ecosystem is a high priority.
Stability: 3 - Legacy. Although this feature is unlikely to be removed and is still covered by semantic versioning guarantees, it is no longer actively maintained, and other alternatives are available.
Features are marked as legacy rather than being deprecated if their use does no harm, and they are widely relied upon within the npm ecosystem. Bugs found in legacy features are unlikely to be fixed.

Use caution when making use of Experimental features, particularly when authoring libraries. Users may not be aware that experimental features are being used. Bugs or behavior changes may surprise users when Experimental API modifications occur. To avoid surprises, use of an Experimental feature may need a command-line flag. Experimental features may also emit a warning.

Stability overview#
API	Stability
Assert	(2) Stable
Async hooks	(1) Experimental
Asynchronous context tracking	(2) Stable
Buffer	(2) Stable
Child process	(2) Stable
Cluster	(2) Stable
Console	(2) Stable
Crypto	(2) Stable
Diagnostics Channel	(2) Stable
DNS	(2) Stable
Domain	(0) Deprecated
File system	(2) Stable
HTTP	(2) Stable
HTTP/2	(2) Stable
HTTPS	(2) Stable
Inspector	(2) Stable
Modules: node:module API	(1) .2 - Release candidate (asynchronous version) Stability: 1.1 - Active development (synchronous version)
Modules: CommonJS modules	(2) Stable
Modules: TypeScript	(1) .1 - Active development
OS	(2) Stable
Path	(2) Stable
Performance measurement APIs	(2) Stable
Punycode	(0) Deprecated
Query string	(2) Stable
Readline	(2) Stable
REPL	(2) Stable
Single executable applications	(1) .1 - Active development
SQLite	(1) .1 - Active development.
Stream	(2) Stable
String decoder	(2) Stable
Test runner	(2) Stable
Timers	(2) Stable
TLS (SSL)	(2) Stable
Trace events	(1) Experimental
TTY	(2) Stable
UDP/datagram sockets	(2) Stable
URL	(2) Stable
Util	(2) Stable
VM (executing JavaScript)	(2) Stable
Web Crypto API	(2) Stable
Web Streams API	(2) Stable
WebAssembly System Interface (WASI)	(1) Experimental
Worker threads	(2) Stable
Zlib	(2) Stable
JSON output#
Added in: v0.6.12
Every .html document has a corresponding .json document. This is for IDEs and other utilities that consume the documentation.

System calls and man pages#
Node.js functions which wrap a system call will document that. The docs link to the corresponding man pages which describe how the system call works.

Most Unix system calls have Windows analogues. Still, behavior differences may be unavoidable.